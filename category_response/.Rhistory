legend(x = 1.2, y = -1.5, legend = c("original", "fit"), col = 1:2, lwd = 1)
set.seed(1)
X = rnorm(100)
eps = rnorm(100, mean = 0, sd = sqrt(4))
Y = -1 + 0.5 * X + eps
fit = lm(Y ~ X)
summary(fit)
plot(X, Y)
abline(-1, 0.5, col = 1)
abline(fit, col = 2)
legend(x = 1.2, y = -1.5, legend = c("original", "fit"), col = 1:2, lwd = 1)
set.seed(1)
X = rnorm(100)
eps = rnorm(100, mean = 0, sd = sqrt(0.25))
Y = -1 + 0.5 * X + eps
fit = lm(Y ~ X)
summary(fit)
plot(X, Y)
abline(-1, 0.5, col = 1)
abline(fit, col = 2)
legend(x = 1.2, y = -1.5, legend = c("original", "fit"), col = 1:2, lwd = 1)
set.seed(1)
X = rnorm(100)
eps = rnorm(100, mean = 0, sd = sqrt(0.25))
Y = -1 + 0.5 * X + eps
fit = lm(Y ~ X)
summary(fit)
plot(X, Y)
abline(-1, 0.5, col = 2)
abline(fit, col = 3)
legend(x = 1.2, y = -1.5, legend = c("original", "fit"), col = 2:3, lwd = 1)
set.seed(1)
X = rnorm(100)
eps = rnorm(100, mean = 0, sd = sqrt(0.1))
Y = -1 + 0.5 * X + eps
fit = lm(Y ~ X)
summary(fit)
plot(X, Y)
abline(-1, 0.5, col = 1)
abline(fit, col = 2)
legend(x = 1.2, y = -1.5, legend = c("original", "fit"), col = 1:2, lwd = 1)
set.seed(1)
X = rnorm(100)
eps = rnorm(100, mean = 0, sd = sqrt(0.5))
Y = -1 + 0.5 * X + eps
fit = lm(Y ~ X)
summary(fit)
plot(X, Y)
abline(-1, 0.5, col = 1)
abline(fit, col = 2)
legend(x = 1.2, y = -1.5, legend = c("original", "fit"), col = 1:2, lwd = 1)
confint(fit.e)
fit.e = lm(Y ~ X)
confint(fit.e)
plot(fit1)
fit1 = lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin)
summary(fit1)
par(mfrow = c(2, 2))
plot(fit1)
rm(list = ls())
ls
ls()
rm(list = ls())
ls()
library(MASS)
attach(Boston)
Boston
rm(list = ls())
library(MASS)
attach(Boston)
fit.1 = lm(crim ~ age)
summary(fit.1)
par(mfrow = c(2,2))
plot(fit.1)
plot(crim~age)
plot(crim,age)
abline(fit.1)
plot(crim~age)
abline(fit.1)
?par
?Boston
coef(fit.age)
fit.age = lm(crim ~ age)
coef(fit.age)
coef(fit.age[1])
coef(fit.age[2])
coef(fit.age[1,1])
coef(fit.age[1,2])
coef(fit.age)
dim(coef(fit.age))
class(coef(fit.age))
coef(fit.age)
coef(fit)
coef(fit.age)
coef(fit.age$age)
coef(fit.age)
x = coef(fit.age)
x
plot(x)
plot(x[1])
plot(x[2])
x[1]
x[2]
coef(fit.age[1])
coef(fit.age[2])
coef(fit.age)[2]
fit.all = lm(crim ~ ., data = Boston)
coef(fit.all)
coef(fit.all)[-1]
plot(allvari.coef, univari.coef)
univari.coef = c(coef(fit.zn)[2], coef(fit.indus)[2], coef(fit.chas)[2], coef(fit.nox)[2], coef(fit.rm)[2], coef(fit.age)[2], coef(fit.dis)[2], coef(fit.rad)[2], coef(fit.tax)[2], coef(fit.ptratio)[2], coef(fit.black)[2], coef(fit.lstat)[2], coef(fit.medv)[2])
allvari.coef = coef(fit.all)[-1]
plot(allvari.coef, univari.coef)
poly(zn,3)
head(zn)
head(zn, 1)
head(zn, 10)
?poly
poly(1:10, 2)
polym(1:4, c(1, 4:6), degree = 3)
polym(1:4, degree = 3)
polym(1:4, degree = 3, raw = T)
I(x)
x
I(x^2)
fit.dis = lm(crim ~ dis)
summary(fit.dis)
par(mfrow = c(2,2))
plot(fit.dis)
library(MASS)
attach(Boston)
Str(Boston)
Str(Boston)
str(Boston)
fit = lm(crim ~ .)
summary(fit)
par(mfrow = c(2, 2))
plot(fit)
fit = lm(crim ~ ., data = Boston)
summary(fit)
par(mfrow = c(2, 2))
plot(fit)
names(fit)
residuals(fit)
names(fit)
effects(fit)
names(fit)
model(fit)
df.residual(fit)
qr(fit)
close all()
close all()
close all
close
new.x = data.frame(X = seq(300, 1000))
new.y <- predict(fit, newdata = new.x, se.fit=T, type="response")
plot(X, Y)
lines(new.x$X, new.y$fit)
library(xtable)
data = read.csv('performance.csv')
attach(data)
library(xtable)
data = read.csv('performance.csv')
setwd("~/Dropbox/neu/tools/github/data_mining/category_response")
library(xtable)
data = read.csv('performance.csv')
attach(data)
midX = median(X)
group1 = subset(data, X >= midX)
group2 = subset(data, X < midX)
Y0count1 = sum(!group1$Y)
Y1count1 = sum(group1$Y)
Y0count2 = sum(!group2$Y)
Y1count2 = sum(group2$Y)
Q = c('aboveMid', 'belowMid')
Y0Count = c(Y0count1, Y0count2)
Y1Count = c(Y1count1, Y1count2)
tableOfCount = data.frame(Q, Y0Count, Y1Count)
Y0Prop = Y0Count / c(dim(group1)[1], dim(group2)[1])
Y1Prop = Y1Count / c(dim(group1)[1], dim(group2)[1])
tableOfProp = data.frame(Q, Y0Prop, Y1Prop)
quan = quantile(X)
group1 = subset(data, X < quan[2] & X >= quan[1])
group2 = subset(data, X < quan[3] & X >= quan[2])
group3 = subset(data, X < quan[4] & X >= quan[3])
group4 = subset(data, X >= quan[4])
Q = c("Q1", "Q2", "Q3", "Q4")
Y0Count = c(sum(!group1$Y), sum(!group2$Y), sum(!group3$Y), sum(!group4$Y))
Y1Count = c(sum(group1$Y), sum(group2$Y), sum(group3$Y), sum(group4$Y))
Y0prop = Y0Count / c(dim(group1)[1], dim(group2)[1], dim(group3)[1],dim(group4)[1])
Y1prop = Y1Count / c(dim(group1)[1], dim(group2)[1], dim(group3)[1],dim(group4)[1])
tableOfCount = data.frame(Q, Y0Count, Y1Count)
tableOfProp = data.frame(Q, Y0prop, Y1prop)
ys = c(6,1,3,3,3,4,1,6)
cs = rep(c("Y0", "Y1"), 4)
qs = rep(Q, 1, each = 2)
temp = data.frame(ys, cs, qs)
ov = xtabs(ys ~ qs + cs, data = temp)
ov
prop.test(ov)
summary(ov)
fit = glm(Y ~ X, family = binomial, data)
summary(fit)
new.x = data.frame(X = seq(300, 1000))
new.y <- predict(fit, newdata = new.x, se.fit=T, type="response")
plot(X, Y)
lines(new.x$X, new.y$fit)
par(mrow = c(2,2))
par(mfrow = c(2,2))
par(mfrow = c(2,2))
plot(fit)
fit$coefficients
fit$coefficients
confint(fit)
confint(fit$coefficients)
confint(fit)
confint(fit, 95)
confint(fit)
?confint
confint(fit, c(5, 95))
summary(fit)
confint(fit)
confint(fit, level = 0.95)
confint(fit, level = c(0.95)
)
confint(fit, level = c(0.9)
)
coef(fit)
interval = confint(fit, level = c(0.9))
interval
class(interval)
interval = confint(fit, level = c(0.9))
intervalX = c(interval[2][1], interval[2][2])
intervalX
interval
interval[2][2]
interval[2][1]
interval[1][1]
interval[1][2]
interval[1]
interval[3]
interval[4]
dim(interval)
interval[2,2]
e.beta1 = exp(intervalX)
e.beta1
intervalX
intervalX = c(interval[2, 1], interval[2, 2])
e.beta1 = exp(intervalX)
e.beta1
predict(fit, data.frame(X = c(550)))
predict(fit, data.frame(X = c(550)), type = "res")
?predict.glm
predict(fit, data.frame(X = c(550)), type = "res")
predict(fit, data, type = "res")
predict(fit, X, type = "res")
predict(fit, data, type = "res")
pred = predict(fit, data, type = "res")
class(pred)
dim(pred)
lenght(pred)
length(pred)
pred = predict(fit, data.frame(X = X), type = "res")
pred
pred = predict(fit,data, type = "res")
pred
pred.prob = predict(fit, data, type = "res")
pred.prob = predict(fit, data, type = "res")
pred.label = rep(0, 27)
pred.label[pred.prob > 0.5] = 1
pred.label
table(pred.label, Y)
library(ROCR)
install.packages(library(ROCR))
install.packages(ROCR)
install.packages('ROCR')
library(ROCR)
pred <- prediction(scopred.probres, labels=Y )
pred <- prediction(pred.prob, labels=Y )
pred
?prediction
perfTrain <- performance(pred, "tpr", "fpr")
plot(perfTrain, colorize=F, main="In-sample ROC curve")
unlist(attributes(performance(pred, "auc"))$y.values)
unlist(attributes(performance(pred, "auc"))$y.values)
perfTrain
plot(perfTrain, colorize=F, main="In-sample ROC curve")
attributes(performance(pred, "auc"))$y.values
performance(pred, "auc")
x = seq(from = -10, to = 200, length = 500)
x
exp(1)
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(beta0 + beta1 * x))
plot(y, x)
plot(x, y)
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y ~ x)
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x)
beta2 = 2
y2 = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x)
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
lines(y1 ~ x)
beta2 = 2
y2 = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x)
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
lines(y1 ~ x)
beta2 = 2
y2 = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x)
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
lines(y1 ~ x)
beta2 = 2
y2 = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x)
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
lines(y1 ~ x)
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red')
beta2 = 2
y2 = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
y1
?"plot"
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y2 = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
?legend
legend(100, 100)
legend("right")
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
legend(-1, 1.9, c('beta1', 'beta2'), col = (2,3))
legend(-1, 1.9, c('beta1', 'beta2'), col = c(2,3))
legend(100, 100, c('beta1', 'beta2'), col = c(2,3))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
legend(100, 100, c('beta1', 'beta2'), col = c(2,3))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
legend(100, 100, c('beta1', 'beta2'), col = c(2,3))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
title('hhaha')
legend(100, 100, c('beta1', 'beta2'), col = c(2,3))
legend("topright", legend = c('beta1', 'beta2'), col = c(2,3))
legend('downright', legend =c('beta1', 'beta2'), col = c(2,3))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('downright', legend =c('beta1', 'beta2'), col = c(2,3))
legend('bottomright', legend =c('beta1', 'beta2'), col = c(2,3))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1', 'beta2'), col = c(3,4))
legend('bottomright', legend = c('beta1', 'beta2'), col = c('red', 'green'))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1', 'beta2'), col = c('red', 'green'))
legend('bottomright', legend = c('beta1', 'beta2'), col = c(1, 3))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1', 'beta2'), col = c(1, 3))
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = 2
y = 1 / (1 + exp(-beta0 - beta2 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1', 'beta2'), col = c(1, 3), pch = 1:2)
legend('bottomright', legend = c('beta1', 'beta2'), col = c('red', 'green'), pch = 1:2)
legend('bottomright', legend = c('beta1=0.2', 'beta1=2'), col = c('red', 'green'), pch = 1:2)
legend('bottomright', legend = c('beta1=0.2', 'beta1=2'), col = c('red', 'green'), pch = 1:1)
beta2 = -2
y = 1 / (1 + exp(-beta0 - beta1 * x - beta2 * I(x^2)))
plot(y1 ~ x, col = 'red', type = 'l')
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta11 = 2
y = 1 / (1 + exp(-beta0 - beta11 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1=0.2', 'beta1=2'), col = c('red', 'green'), pch = 1:1)
beta2 = -2
y = 1 / (1 + exp(-beta0 - beta1 * x - beta2 * I(x ^ 2)))
plot(y1 ~ x, col = 'red', type = 'l')
beta2 = -2
y = 1 / (1 + exp(-beta0 - beta1 * x - beta2 * I(x ^ 2)))
plot(y1 ~ x, col = 'red', type = 'l')
title('sigmoid')
beta0 = -25
beta1 = 0.2
y = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta11 = 2
y = 1 / (1 + exp(-beta0 - beta11 * x))
lines(y ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1=0.2', 'beta1=2'), col = c('red', 'green'), pch = 1:1)
beta2 = -2
y = 1 / (1 + exp(-beta0 - beta1 * x - beta2 * I(x ^ 2)))
plot(y ~ x, col = 'red', type = 'l')
title('sigmoid')
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta11 = 2
y2 = 1 / (1 + exp(-beta0 - beta11 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1=0.2', 'beta1=2'), col = c('red', 'green'), pch = 1:1)
beta2 = -2
y = 1 / (1 + exp(-beta0 - beta1 * x - beta2 * I(x ^ 2)))
plot(y ~ x, col = 'red', type = 'l')
title('sigmoid')
x = seq(from = -10, to = 200, length = 500)
beta0 = -25
beta1 = 0.2
y1 = 1 / (1 + exp(-beta0 - beta1 * x))
plot(y1 ~ x, col = 'red', type = 'l')
beta11 = 2
y2 = 1 / (1 + exp(-beta0 - beta11 * x))
lines(y2 ~ x, col = 'green')
title('sigmoid')
legend('bottomright', legend = c('beta1=0.2', 'beta1=2'), col = c('red', 'green'), pch = 1:1)
beta2 = -2
y3 = 1 / (1 + exp(-beta0 - beta1 * x - beta2 * I(x ^ 2)))
plot(y3 ~ x, col = 'red', type = 'l')
title('sigmoid')
y4 = 25 + 0.2 * x - 2 * I(x^2)
plot(y4 ~ x)
@
plot(y4 ~ x, type = 'l')
y4 = -25 + 0.2 * x - 2 * I(x^2)
plot(y4 ~ x, type = 'l')
y4 = -25 + 0.2 * x - 2 * I(x^2)
plot(y4 ~ x, type = 'l')
y4 = -25 + 0.2 * x - 2 * I(x^2)
y4 = -25 + 0.2 * x - 2 * I(x^2)
beta2 = -2
y3 = 1 / (1 + exp(-beta0 - beta1 * x - beta2 * I(x ^ 2)))
plot(y3 ~ x, col = 'red', type = 'l')
