plot(x[2])
x[1]
x[2]
coef(fit.age[1])
coef(fit.age[2])
coef(fit.age)[2]
fit.all = lm(crim ~ ., data = Boston)
coef(fit.all)
coef(fit.all)[-1]
plot(allvari.coef, univari.coef)
univari.coef = c(coef(fit.zn)[2], coef(fit.indus)[2], coef(fit.chas)[2], coef(fit.nox)[2], coef(fit.rm)[2], coef(fit.age)[2], coef(fit.dis)[2], coef(fit.rad)[2], coef(fit.tax)[2], coef(fit.ptratio)[2], coef(fit.black)[2], coef(fit.lstat)[2], coef(fit.medv)[2])
allvari.coef = coef(fit.all)[-1]
plot(allvari.coef, univari.coef)
poly(zn,3)
head(zn)
head(zn, 1)
head(zn, 10)
?poly
poly(1:10, 2)
polym(1:4, c(1, 4:6), degree = 3)
polym(1:4, degree = 3)
polym(1:4, degree = 3, raw = T)
I(x)
x
I(x^2)
fit.dis = lm(crim ~ dis)
summary(fit.dis)
par(mfrow = c(2,2))
plot(fit.dis)
library(MASS)
attach(Boston)
Str(Boston)
Str(Boston)
str(Boston)
fit = lm(crim ~ .)
summary(fit)
par(mfrow = c(2, 2))
plot(fit)
fit = lm(crim ~ ., data = Boston)
summary(fit)
par(mfrow = c(2, 2))
plot(fit)
names(fit)
residuals(fit)
names(fit)
effects(fit)
names(fit)
model(fit)
df.residual(fit)
qr(fit)
close all()
close all()
close all
close
new.x = data.frame(X = seq(300, 1000))
new.y <- predict(fit, newdata = new.x, se.fit=T, type="response")
plot(X, Y)
lines(new.x$X, new.y$fit)
exp(1)
x1 = 40
x2 = 3.5
z = -6 + 0.05x1 + x2
z = -6 + 0.05 * x1 + x2
z
1 / (1 + exp(-z))
ln(e)
ln(exp)
log(2)
log(exp)
log(2.71)
log(1)
2.5 / 0.05
sample(1:100, rep=T)
?sample
sample(1:100, rep=T) == 4
sum(sample(1:100, rep=T) == 4)
store = rep(NA, 10000)
for (i in 10000){}
for (i in 10000){
store[i] = sum(sampel(1:100, 100, rep=T) == 4) > 0
}
for (i in 10000){
store[i] = sum(sample(1:100, 100, rep=T) == 4) > 0
}
mean(store)
store[i] = sum(sample(1:100, 100, rep=T) == 4) > 0
store
store = rep(NA, 10000)
for (i in 10000){
store[i] = sum(sample(1:100, 100, rep=T) == 4) > 0
}
store
for (i in 1:10000){
store[i] = sum(sample(1:100, 100, rep=T) == 4) > 0
}
store
mean(store)
setwd("~/Dropbox/neu/fall15/data mining/project")
ls
pwd
lh
ls()
clear all;
lh
read.table('train.csv')
read.csv('train.csv', header = F)
trainData = read.csv('train.csv', header = F)
head(trainData)
trainData = read.csv('train.csv', header = T)
summary(trainData)
write(x, file = "data",append = FALSE, sep = "\t")
write(trainData, file = "data",append = FALSE, sep = "\t")
trainData[1]
trainData[1, 1]
trainData[1, ]
write(trainData[1,], file = "data",append = FALSE, sep = "\t")
sample = trainData[c(1,2), ]
sample
write.table(sample, 'data', sep = '\t', row.names = F, col.names = F)
write.table(sample, 'data.txt', sep = '\t', row.names = F, col.names = F)
sample2 = sample[, c(1)]
sample2
sample2 = sample[, c(1, 2,3)]
ssample
ssample2
sample2
trainData2 = trainData[, c(1, 2, 4, 5, 7, 8, 9)]
trainData2 = trainData[, c(1, 4, 5, 7, 8, 9, 2)]
write.table(trainData2, 'data.txt', sep = '\t', row.names = F, col.names = F)
summary(trainData2)
read.table('data.hour.txt', header = T, sep = ',')
data.hour =read.table('data.hour.txt', header = T, sep = ',')
summary(data.hour)
data.hour =read.table('data.hour.txt', header = T, sep = '\t')
data.hour =read.table('data.hour.txt', header = F, sep = '\t')
summary(data.hour)
summary(V7)
summary(data.hour$V7)
plot(data.hour$V7)
class(summary(data.hour$V7))
summary(data.hour$V7).sort()
sort(summary(data.hour$V7))
log(2)
log(1/3)
log2(1)
log2(1/3)
log(3/4\)
log(3/4)
log(4/3)
log(3)
log(2)
train_error = c(0.6920273348519362, 0.6920273348519362, 0.69749430523918, 0.7094533029612756, 0.7068337129840547, 0.7086560364464692, 0.7046697038724374, 0.7013667425968109, 0.6985193621867882, 0.6978359908883827, 0.6966970387243736, 0.6973804100227791, 0.6980637813211845, 0.7004555808656037, 0.6997722095671981, 0.6961275626423691, 0.6915717539863326, 0.6920273348519362, 0.6894077448747153, 0.6937357630979499, 0.6963553530751708, 0.6944191343963553, 0.6997722095671981, 0.7, 0.6992027334851936, 0.6979498861047836, 0.7007972665148063, 0.7003416856492027, 0.7034168564920273, 0.7006833712984055, 0.7020501138952164, 0.7029612756264236, 0.7070615034168565, 0.705239179954442, 0.7030751708428247, 0.7017084282460136, 0.6988610478359909, 0.7011389521640091, 0.7066059225512529, 0.7061503416856492, 0.7080865603644647, 0.7062642369020501, 0.706378132118451, 0.7031890660592255, 0.7029612756264236, 0.7020501138952164, 0.7035307517084283, 0.7051252847380409, 0.7053530751708428, 0.7053530751708428, 0.7059225512528473, 0.7027334851936219, 0.7022779043280183, 0.7054669703872437, 0.7054669703872437, 0.7051252847380409, 0.7027334851936219, 0.7050113895216401, 0.7002277904328018, 0.7002277904328018, 0.7028473804100228, 0.7018223234624146, 0.6963553530751708, 0.6963553530751708, 0.6977220956719818, 0.6979498861047836, 0.7002277904328018, 0.7007972665148063, 0.6988610478359909, 0.6997722095671981, 0.700113895216401, 0.6990888382687928, 0.6989749430523917, 0.6990888382687928, 0.6994305239179954, 0.706492027334852, 0.7060364464692483, 0.7066059225512529, 0.703872437357631, 0.7036446469248292, 0.7039863325740319, 0.7046697038724374, 0.7060364464692483, 0.7059225512528473, 0.7059225512528473, 0.7062642369020501, 0.706378132118451, 0.7051252847380409, 0.7051252847380409, 0.7056947608200456, 0.7056947608200456, 0.7058086560364465, 0.7062642369020501, 0.7055808656036446, 0.7051252847380409, 0.7058086560364465, 0.7059225512528473, 0.7062642369020501, 0.7061503416856492, 0.7051252847380409)
plot(train_error)
plot(train_error, pch = 2)
plot(train_error, pch = 1)
plot(train_error, pch = 3)
auc = c(0.5804073271301657, 0.5975686142932943, 0.633012735404464, 0.6652972016257884, 0.6854999337395652, 0.698332123108412, 0.7013533838567084, 0.706413000876357, 0.7185080532485731, 0.7228857089395, 0.7284694534432335, 0.7339459900524964, 0.7348320269025634, 0.7453562685432028, 0.7516755783228946, 0.7543750499434917, 0.7570344013258046, 0.7618528005828917, 0.760613953802332, 0.764717633762941, 0.7682138023215467, 0.7683716361661858, 0.7634043370556622, 0.7671238553944174, 0.7716950808948068, 0.7733329792825688, 0.7663644661419078, 0.7655038249890653, 0.7663346861712235, 0.764994587490328, 0.7676330928931608, 0.7671238553944173, 0.7639552665133675, 0.7633775350820469, 0.7619689424685703, 0.7609742914476378, 0.7612929371339847, 0.7627402437093521, 0.7678594206703772, 0.766343620162431, 0.7693871331665988, 0.7688302477147605, 0.7684311961075592, 0.765673570821983, 0.7581571062206873, 0.7630559113986322, 0.7642888021850568, 0.7635145229472041, 0.7641250123462794, 0.764071408399043, 0.7646699858098432, 0.764991609493258, 0.7652179372704762, 0.7648010176808657, 0.7647950616867285, 0.7546400916826038, 0.7517812144966926, 0.753425068878591, 0.7551225272077249, 0.7551910211403039, 0.7560933542521087, 0.7549646933630877, 0.755265471067021, 0.7540980962161066, 0.7511558351122726, 0.7517246325523866, 0.7506049056545723, 0.7425404895926441, 0.7428502012877854, 0.7427310814050396, 0.7429514531881201, 0.7437227544289027, 0.744077136080073, 0.7439669501885321, 0.7440175761386995, 0.7435172726311635, 0.7430378151031095, 0.7429395411998437, 0.7428055313317548, 0.7447233614439722, 0.7446578455084616, 0.7444255617371053, 0.7448752392944726, 0.7449467112241206, 0.7451373030365158, 0.7453755428020085, 0.7455065746730293, 0.7455750686056082, 0.7457745944092082, 0.7460158121717695, 0.746030702157113, 0.7460128341747007, 0.7459205162655722, 0.7460128341747002, 0.7457865063974817, 0.7458609563241981, 0.745715034467834, 0.7455333766466461, 0.7455720906085389, 0.7323259596471466)
plot(auc)
error = c([0.6920273348519901, 0.7878900837206894, 0.784941687220314, 0.801381351399092, 0.810197252663699, 0.8173918919112583, 0.8150631552664338, 0.8390060649549905, 0.8238457462338576, 0.8320378634479912, 0.8329366079742268, 0.8389063356517721, 0.840937537272545, 0.8325800812232433, 0.8451783343246563, 0.8338076364214797, 0.8153834531148371, 0.8621699111251623, 0.8128495105106236, 0.8420064140910203, 0.8229868190034424, 0.8500104217389283, 0.8029786499202383, 0.840186591081603, 0.8297246455336872, 0.821544583546793, 0.8515984878746818, 0.8862098881698397, 0.8951361353099391, 0.8862567036066389, 0.9066389204937957, 0.7588587348499837, 0.8262351517044932, 0.9138788277506266, 0.8549009723957931, 0.8655043478817542, 0.9314884677710588, 0.77705382824179, 0.8018733618261331, 0.9229245465740044, 0.8634654636657413, 0.8929535206089131, 0.7904893562971388, 0.8570943520529448, 0.8721701746814843, 0.7007968792994164, 0.905190859860183, 0.7731519034151255, 0.9560648727086141, 0.9718711912403609, 0.9535268681701193, 0.9005909613490164, 0.9686333880485147, 0.7024034036938314, 0.9741989762654824, 0.5962203002143026, 0.6956471106020571, 0.8823012430224976, 0.9133584420682722, 0.9740560669391176, 0.9187201428461644, 0.7961988999694859, 0.7747484535928151, 0.9327354895624812, 0.7901198564948765, 0.9606221886979447, 0.811140614741538, 0.7002675201952602, 0.9460318961123585, 0.9422489503478582, 0.9801569897662216, 0.9600976983444872, 0.9646628808921096, 0.976998825246574, 0.972901052247018, 0.7513413361891753, 0.8634866185901686, 0.968496023036941, 0.9075491981680437, 0.9445771828722567, 0.9730693766057775, 0.980239294636178, 0.9571383315541906, 0.9729286306851466, 0.9673820002469083, 0.9705289209512196, 0.980203570772003, 0.9545706504096315, 0.9760688587232886, 0.9831259929271688, 0.9749427140835002, 0.9621038459322688, 0.9699762685025873, 0.9480525241775045, 0.9773785444381076, 0.9781193873480477, 0.9677698860778601, 0.979048005986462, 0.9729337097597998, 0.43100583466948866])
error = c(0.6920273348519901, 0.7878900837206894, 0.784941687220314, 0.801381351399092, 0.810197252663699, 0.8173918919112583, 0.8150631552664338, 0.8390060649549905, 0.8238457462338576, 0.8320378634479912, 0.8329366079742268, 0.8389063356517721, 0.840937537272545, 0.8325800812232433, 0.8451783343246563, 0.8338076364214797, 0.8153834531148371, 0.8621699111251623, 0.8128495105106236, 0.8420064140910203, 0.8229868190034424, 0.8500104217389283, 0.8029786499202383, 0.840186591081603, 0.8297246455336872, 0.821544583546793, 0.8515984878746818, 0.8862098881698397, 0.8951361353099391, 0.8862567036066389, 0.9066389204937957, 0.7588587348499837, 0.8262351517044932, 0.9138788277506266, 0.8549009723957931, 0.8655043478817542, 0.9314884677710588, 0.77705382824179, 0.8018733618261331, 0.9229245465740044, 0.8634654636657413, 0.8929535206089131, 0.7904893562971388, 0.8570943520529448, 0.8721701746814843, 0.7007968792994164, 0.905190859860183, 0.7731519034151255, 0.9560648727086141, 0.9718711912403609, 0.9535268681701193, 0.9005909613490164, 0.9686333880485147, 0.7024034036938314, 0.9741989762654824, 0.5962203002143026, 0.6956471106020571, 0.8823012430224976, 0.9133584420682722, 0.9740560669391176, 0.9187201428461644, 0.7961988999694859, 0.7747484535928151, 0.9327354895624812, 0.7901198564948765, 0.9606221886979447, 0.811140614741538, 0.7002675201952602, 0.9460318961123585, 0.9422489503478582, 0.9801569897662216, 0.9600976983444872, 0.9646628808921096, 0.976998825246574, 0.972901052247018, 0.7513413361891753, 0.8634866185901686, 0.968496023036941, 0.9075491981680437, 0.9445771828722567, 0.9730693766057775, 0.980239294636178, 0.9571383315541906, 0.9729286306851466, 0.9673820002469083, 0.9705289209512196, 0.980203570772003, 0.9545706504096315, 0.9760688587232886, 0.9831259929271688, 0.9749427140835002, 0.9621038459322688, 0.9699762685025873, 0.9480525241775045, 0.9773785444381076, 0.9781193873480477, 0.9677698860778601, 0.979048005986462, 0.9729337097597998, 0.43100583466948866)
plot(error)
?plot
plot(error, type = l)
plot(error, type ='l')
plot(auc, type = 'l')
plot(train_error, type = 'l')
?plot
870000/5
870000/5/500
870000/5/200
870000/100
/10
870000/100/10
870000/5/200
870000/5/800
0.005*80
0.9 * 0.9^8
0.9 * 0.5^8
0.9 * 0.8^8
0.9 * 0.7^8
555220.2594935556 / (870000/5)
870000/5*2.1
170000/50
17000*2.2
87000/2
430000/100
430000/400
870000/2
870000/2 * 2.1
1380000/43500
1380000/435000
870000/50
870000/50/10
17400*3
49000/17400
48000/17400
48550/17400
summary(data.hour)
126182/87000
126182/870000
summary(data.hour$V7)
1158287/75000
1158287/750000
1158287 / (750000/2)
878049 - 67
pa = seq(0,1, 100)
pa
pa = seq(100,0, 1)
?seq
pa = seq(0,1, 100)
pa
pa = seq(from = 0, to = 100, 100)
pa
pa = seq(from = 0, to = 1, by = 0.01)
seq
pa
logOdds = log(pa / (1 - pa))
plot(pa, logOdds)
plot(pa, logOdds, type = 'l')
pa = seq(from = 0, to = 1, by = 0.001)
logOdds = log(pa / (1 - pa))
plot(pa, logOdds, type = 'l')
pa = seq(from = 0, to = 1, by = 0.001)
logOdds = log(pa / (1 - pa))
plot(pa, logOdds, type = 'l')
tail(logOdds)
tail(pa)
pa = 45 / 877982
pa
log(pa / (1 - pa))
pa = 23 / 877982
log(pa / (1 - pa))
877982 / 50
877982 / 50 * 2.1
877982 / 50
1 /(877982 / 50 )
137*128
137*128 + 128*39
51272.99656288911 / 17559
50274.0366046809 / 17559
48217.32927367088 / 17559
46013.88678473928/17559
45261.21131465177 / 17559
42596.09950472339 / 17559
42238.44879671226 / 17559
41264.1782457183/17559
40346.40609927614/17599
40062.00678374555/17559
877982/20
877982/20/20
877982/20/50
159725.94175361178 / (877982/20)
158748.33642199147 /  (877982/20)
149350.77167330385 / (877982/20)
141910.8028063031 / (877982/20)
139976.64272317773 / (877982/20)
138428.39296732945 /(877982/20)
877982 / 2
877982 / 2 / 2000
1615396.1850930816 / 438991
1599059.2317362814 / 438991
1593899.9326088424 / 438991
6965707 / 438991
1492845 / 438991
1435748 / 438991
1414804.2265998763 / 438991
1410351.5491886216 / 438991
1394668.3087720992 / 438991
1378191.717999661 / 438991
1379639.0598080885 / 438991
124 / 20
877982 / 2
877982 / 2 / 220
1371288.3053046628 / 438991
1370016.0743349718 / 438991
877982 + 884262
877982 / 2000
2925906 / 877982
2827418 / 877982
2789247.5275339764 / 877982
2773304.199588373 / 877982
2759285.4664883222 / 877982
2747282.857845866 / 877982
2744054.126609635/877982
2729652.9408562817 / 877982
2721083 / 877982
126 / 726
126/727
whos
ls
ls()
View(sample)
clear sample
clear(sample)
clean
rm sample
View(sample)
prcomp(data.hour)
setwd("~/Dropbox/neu/tools/github/data_mining/pca")
clearn
clear all
clear
load('hw7.RData')
summary(countsTableFull)
str(countsTableSubset)
str(countsTableFull)
class(countsTableFull)
dim(countsTableFull)
prcomp(countsTableFull, scale. = F)
Cols = function(vec) {
cols = rainbow(length(vec))
return cols[as.numeric(as.factor(vec))]
}
Cols = function(vec) {
cols = rainbow(length(vec))
return cols[as.numeric(as.factor(vec))]
}
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
Cols(c(1,2,3))
as.factor(c(1,2,3))
as.numeric(as.factor(c(1,2,3)))
View(countsTableFull)
View(countsTableSubset)
View(countsTableSubset)
pr.out = prcomp(countsTableFull, scale. = F)
pr.out
pr.out = prcomp(countsTableFull, scale. = F)
pr.out
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
# par(mfrow = c(1, 2))
plot(pr.out$x[, 1:2], col = Cols = c(1,2), pch = 19, xlab = 'Z1', ylab = 'Z2')
pr.out = prcomp(countsTableFull, scale. = F)
pr.out
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
# par(mfrow = c(1, 2))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
pr.out = prcomp(countsTableFull, scale. = F)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
# par(mfrow = c(1, 2))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
?plot
pr.out = prcomp(countsTableFull, scale. = F)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
par(mfrow = c(1, 2))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
pr.out = prcomp(countsTableFull, scale. = F)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
par(mfrow = c(2, 1))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
pr.out = prcomp(countsTableFull, scale. = F)
summary(pr.out)
<<1b, fig=T>>=
pr.out = prcomp(countsTableFull, scale. = T)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
par(mfrow = c(2, 1))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
pr.out2 = prcomp(countsTableFull, scale. = T)
summary(pr.out)
par(mfrow = c(2, 1))
plot(pr.out2$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out2)
pr.out2 = prcomp(countsTableFull, scale. = T)
summary(pr.out2)
par(mfrow = c(2, 1))
plot(pr.out2$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out2)
pr.out = prcomp(countsTableFull, scale. = F)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
par(mfrow = c(2, 1))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
pr.out = prcomp(countsTableFull, scale. = F)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
par(mfrow = c(2, 2))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
pve = 100 * pr.out$sdev ^ 2 / sum(pr.out$sdev ^ 2)
plot(pve, type = 'o', ylab = 'PVE', xlab = 'Principle Component', col = 'blue')
plot(cumsum(pve), type = 'o', ylab = 'Cumulative PVE', xlab = 'Principle Component', col = 'blue')
heatmap(countsTableSubset)
heatmap(countsTableSubset, scale = 'none')
countsTableSubset[1, ]
?apply
apply(countsTableSubset, 1, sd)
heatmap.2(countsTableSubset)
heatmap(countsTableSubset, distfun=function(x) as.dist((1-cor(t(x)))/2))
heatmap(countsTableSubset)
heatmap(countsTableSubset, distfun = function(x) (1 - cor(t(x)))/2)
(1 - cor(t(x)))/2)
heatmap(countsTableSubset, distfun = function(x) as.dist((1 - cor(t(x)))/2))
heatmap(countsTableSubset, distfun = function(x) (1 - cor(t(x)))/2)
par = mfrow(c(1,2))
par(mfrow = c(1, 2))
heatmap(countsTableSubset)
heatmap(countsTableSubset, distfun = function(x) as.dist((1 - cor(t(x)))/2))
par(mfrow = c(2, 1))
heatmap(countsTableSubset)
heatmap(countsTableSubset, distfun = function(x) as.dist((1 - cor(t(x)))/2))
heatmap(countsTableSubset, distfun = function(x) as.dist((1 - cor(t(x)))))
heatmap(countsTableSubset)
heatmap(countsTableSubset, scale = 'none')
km.out = kmeans(countsTableFull, 2, nstart = 20)
summary(km.out)
km.out = kmeans(countsTableFull, 2, nstart = 20)
km.out
summary(km.out)
km.out$cluster
?kmeans
km.out = kmeans(t(countsTableFull), 2, nstart = 20)
summary(km.out)
km.out$cluster
km.out = kmeans(t(countsTableFull), 2, nstart = 50)
summary(km.out)
km.out$cluster
km.out
km.out$size
km.out$iter
km.out = kmeans(t(countsTableFull), centers = 2, iter.max = 100, nstart = 50)
km.out$iter
km.out = kmeans(t(countsTableFull), centers = 2, iter.max = 100, nstart = 50)
km.out$iter
km.out$totss
km.out$iter
km.out$size
km.out = kmeans(t(countsTableSubset), centers = 2, iter.max = 100, nstart = 50)
km.out$cluster
km.out = kmeans(t(countsTableFull), 2, nstart = 50)
km.out$cluster
km.out = kmeans(t(countsTableSubset), 2, nstart = 50)
km.out$cluster
km.out = kmeans(t(countsTableFull), 3, nstart = 50)
km.out$cluster
km.out = kmeans(t(countsTableSubset), 2, nstart = 50)
km.out$cluster
km.out = kmeans(t(countsTableFull), 2, nstart = 50)
km.out$cluster
@
pr.out = prcomp(t(countsTableFull), scale. = FALSE)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
par(mfrow = c(2, 2))
plot(pr.out$x[, 1:2], col = Cols(c(1,2)), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
pve = 100 * pr.out$sdev ^ 2 / sum(pr.out$sdev ^ 2)
plot(pve, type = 'o', ylab = 'PVE', xlab = 'Principle Component', col = 'blue')
plot(cumsum(pve), type = 'o', ylab = 'Cumulative PVE', xlab = 'Principle Component', col = 'red')
vec1 = c(2,2,3,1,4)
Cols(vec1)
as.factor(vec1)
as.numeric(as.factor(vec1))
vec1 = c("a", 'b', 'a', 'c', 'b')
as.factor(vvec1)
as.factor(vec1)
as.numeric(as.factor(vec1))
as.numeric(vec1)
countsTableSubset
head(countsTableSubset)
head(t(countsTableSubset))
pr.out = prcomp(t(countsTableFull), scale. = FALSE)
summary(pr.out)
Cols = function(vec) {
cols = rainbow(length(vec))
return (cols[as.numeric(as.factor(vec))])
}
par(mfrow = c(2, 2))
labs = c('N','N','N', 'T','T','T')
plot(pr.out$x[, 1:2], col = Cols(labs), pch = 19, xlab = 'Z1', ylab = 'Z2')
plot(pr.out)
pve = 100 * pr.out$sdev ^ 2 / sum(pr.out$sdev ^ 2)
plot(pve, type = 'o', ylab = 'PVE', xlab = 'Principle Component', col = 'blue')
plot(cumsum(pve), type = 'o', ylab = 'Cumulative PVE', xlab = 'Principle Component', col = 'red')
2842046.9619371286 / 877982
