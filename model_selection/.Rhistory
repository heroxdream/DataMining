fit.full = regsubsets(y ~ poly(x, 10, raw = T), df, nvmax = 10)
fit.summary = summary(fit.full)
which.max(fit.summary$adjr2)
which.min(fit.summary$bic)
fit.summary
fit.summary$adjr2
fit.summary$bic
which.max(fit.summary$adjr2)
which.min(fit.summary$bic)
coef(fit.full, 3)
set.seed(2015)
X = rnorm(100)
es = rnorm(100)
beta = c(2, 3, 4, 10)
Y = beta[1] + beta[2] * X + beta[3] * X ^ 2 + beta[4] * X ^ 3 + es
plot(Y ~ X)
df = data.frame(y = Y, x = X)
fit.full = regsubsets(y ~ poly(x, 10, raw = T), df, nvmax = 10)
fit.summary = summary(fit.full)
which.max(fit.summary$adjr2)
which.min(fit.summary$bic)
coef(fit.full, 3)
coef(fit.full, 9)
library(leaps)
set.seed(2015)
X = rnorm(100)
es = rnorm(100)
beta = c(2, 3, 4, 10)
Y = beta[1] + beta[2] * X + beta[3] * X ^ 2 + beta[4] * X ^ 3 + es
plot(Y ~ X)
df = data.frame(y = Y, x = X)
fit.full = regsubsets(y ~ poly(x, 10), df, nvmax = 10)
fit.summary = summary(fit.full)
fit.summary
which.max(fit.summary$adjr2)
which.min(fit.summary$bic)
coef(fit, 5)
coef(fit.full, 5)
fit.full = regsubsets(y ~ poly(x, 10, raw = T), df, nvmax = 10)
fit.summary = summary(fit.full)
fit.summary
which.max(fit.summary$adjr2)
which.min(fit.summary$bic)
coef(fit.full, 5)
coef(fit.full, 3)
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre')
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
plot(fit.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
?points
points(3, fit.summary$adjr2[3], col='red')
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
plot(fit.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
points(3, fit.summary$adjr2[3], col='red')
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(3, fit.summary$adjr2[3], col='red')
plot(fit.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(3, fit.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
par(mfrow = c(2, 1))
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(3, fit.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
plot(fit.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
points(3, fit.summary$bic[3], col = 'red', cex = 2, pch = 20)
par(mfrow = c(1, 2))
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(3, fit.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
plot(fit.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
points(3, fit.summary$bic[3], col = 'red', cex = 2, pch = 20)
par(mfrow = c(2, 2))
plot(fit.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(3, fit.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
plot(fit.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
points(3, fit.summary$bic[3], col = 'red', cex = 2, pch = 20)
plot(fit.full, scale = 'adjr2')
plot(fit.full, scale = 'bic')
plot(fit.full, scale = 'adjr2')
plot(fit.full, scale = 'bic')
plot(fit.full, scale = 'adjr2')
plot(fit.full, scale = 'bic')
which.max(fit.summary$adjr2)
which.min(fit.summary$bic)
beta = c(2, 3, 4, 10)
Y = beta[1] + beta[2] * X + beta[3] * X ^ 2 + beta[4] * X ^ 3 + es
plot(Y ~ X)
df = data.frame(y = Y, x = X)
fit.full = regsubsets(y ~ poly(x, 10, raw = T), df, nvmax = 10)
fit.summary = summary(fit.full)
fit.summary
which.max(fit.summary$adjr2)
which.min(fit.summary$bic)
fit.fwd = regsubsets(y ~ poly(x, 10, raw = T), df, nvmax = 10, method = 'forward')
fit.fwd.summary = summary(fit.fwd)
fit.fwd.summary
which.max(fit.fwd.summary$adjr2)
which.min(fit.fwd.summary$bic)
par(mfrow = c(2, 1))
plot(fit.fwd.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(9, fit.fwd.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
par(mfrow = c(2, 1))
plot(fit.fwd.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(9, fit.fwd.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
plot(fit.fwd.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
points(3, fit.fwd.summary$bic[3], col = 'red', cex = 2, pch = 20)
coef(fit.fwd, 3)
which.max(fit.bwd.summary$adjr2)
fit.bwd = regsubsets(y ~ poly(x, 10, raw = T), df, nvmax = 10, method = 'backward')
fit.bwd.summary = summary(fit.bwd)
fit.bwd.summary
which.max(fit.bwd.summary$adjr2)
which.min(fit.bwd.summary$bic)
which.max(fit.fwd.summary$adjr2)
which.min(fit.fwd.summary$bic)
par(mfrow = c(2, 1))
plot(fit.fwd.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(10, fit.fwd.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
plot(fit.fwd.summary$bic, xlab = 'Number of varibles', ylab = 'BIC', type = 'l')
points(3, fit.fwd.summary$bic[3], col = 'red', cex = 2, pch = 20)
coef(fit.fwd, 3)
@
<<8db, fig=TRUE>>=
fit.bwd = regsubsets(y ~ poly(x, 10, raw = T), df, nvmax = 10, method = 'backward')
fit.bwd.summary = summary(fit.bwd)
fit.bwd.summary
which.max(fit.bwd.summary$adjr2)
which.min(fit.bwd.summary$bic)
par(mfrow = c(2, 1))
plot(fit.bwd.summary$adjr2, xlab = 'Number of varibles', ylab = 'Ajusted R-squre', type = 'l')
points(9, fit.bwd.summary$adjr2[3], col = 'red', cex = 2, pch = 20)
library(MASS)
bos = Boston
str(bos)
coef(fit.full, which.max(fit.full.summary$adjr2))
coeflist = list()
coeflist.add(1)
?list
names(fit.full)
fit.full$xnames
fit.full$nbest
names(fit.full.summary)
names(fit.fwd.summary)
names(coeflist)
names(coeflist[1])
coeflist[1]
coeflist[0]
\item rad, black, lstat
\item rad, black, lstat
dim(bos)
train =sample(c(TRUE, FALSE), nrow(bos), rep = T)
train
train =sample(c(TRUE, FALSE, TRUE), nrow(bos), rep = T)
sum(train)
340 / 506
test = !train
test
sum(test)
bos.train = bos[train,]
bos.train
dim(bos.train)
fit.bwd = regsubsets(crim ~ ., bos.train, nvmax = 14, method = 'backward')
?boston
?Boston
train = sample(c(TRUE, TRUE, FALSE), nrow(bos), replace = T)
sum(train)
332/506
sum(test)
166/506
bos.test = bos[test,]
test = !train
sum(test)
train = sample(c(TRUE, TRUE, FALSE), nrow(bos), replace = T)
test.mat = model.matrix(crim ~ ., bos.test)
test.mat
fit.best = regsubsets(crim ~ ., bos.train, nvmax = 14)
test.mat = model.matrix(crim ~ ., bos.test)
val.errors = rep(NA, 13)
for (i in 1:13) {
coefi = coef(fit.best, i)
pred = test.mat[, names(coefi)] %*% coefi
val.errors[i] = mean((bos.test$crim - pred)^2)
}
val.errors
which.min(val.errors)
fit.best = regsubsets(crim ~ ., bos.train, nvmax = 14)
summary(fit.bwd)
summary(fit.best)
k = 10
folds = sample(1:k, k, replace = F)
folds
set.seed(1)
k = 10
pred.count = ncol(bos) - 1
folds = sample(1:k, nrow(bos), replace = T)
err.matrix = matrix(k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i,] - pred) ^ 2)
}
}
mean.err = apply(err.matrix, 2, mean)
mean.err
err.matrix
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i,] - pred) ^ 2)
}
}
err.matrix
pred.count = ncol(bos) - 1
err.matrix = matrix(k, pred.count)
err.matrix = matrix(k, pred.count)
err.matrix
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i,] - pred) ^ 2)
}
}
mean.err = apply(err.matrix, 2, mean)
mean.err
err.matrix
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i,] - pred) ^ 2)
}
}
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(objet$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars = names(coefi)
mat[, xvars] %*% coefi
}
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i,] - pred) ^ 2)
}
}
mean.err = apply(err.matrix, 2, mean)
mean.err
err.matrix
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars = names(coefi)
mat[, xvars] %*% coefi
}
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i,] - pred) ^ 2)
}
}
mean.err = apply(err.matrix, 2, mean)
mean.err
k = 10
pred.count = ncol(bos) - 1
folds = sample(1:k, nrow(bos), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i,] - pred) ^ 2)
}
}
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i] - pred) ^ 2)
}
}
mean.err = apply(err.matrix, 2, mean)
mean.err
which.min(mean.err)
plot(mean.err, pch = 19, type = "b")
plot(mean.err, pch = 19, type = "b")
coef(fit.best, which.min(mean.err))
which.min(mean.err)
mean.err[which.min(mean.err)]
err.matrix
m = matrix(1:9, 3,3)
m
mean(m)
mean(m, 1)
apply(m, 1, mean)
apply(m, 2, mean)
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = which.min(mean.err))
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
coef(fit.best, 9)
read.table('surgical.txt')
setwd("~/Dropbox/neu/tools/github/data_mining/model_selection")
read.table('surgical.txt')
surgical = read.table('surgical.txt')
str(surgical )
rawdata = read.table('surgical.txt')
surgical = rawdata[, -9]
surgical
dimnames(X)[[2]] <- c('blood', 'prog', 'enz', 'liver',
+ 'age', 'female', 'modAlc', 'heavyAlc', 'lsurv')
dimnames(X)[[2]] <- c('blood', 'prog', 'enz', 'liver',
'age', 'female', 'modAlc', 'heavyAlc', 'lsurv')
set.seed(0)
surgical = rawdata[, -9]
dimnames(surgical)[[2]] <- c('blood', 'prog', 'enz', 'liver',
'age', 'female', 'modAlc', 'heavyAlc', 'lsurv')
surgical
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
if (i == 5) {
coef(fit.best, i)
}
for (j in 1:pred.count) {
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
if (i == 5) {
coef(fit.best, i)
}
for (j in 1:pred.count) {
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
if (i == 5) {
coef(fit.best, i)
}
for (j in 1:pred.count) {
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
if (i == 5) {
print(coef(fit.best, i))
}
for (j in 1:pred.count) {
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
mean.err = apply(err.matrix, 2, mean)
which.min(mean.err)
mean.err[which.min(mean.err)]
plot(mean.err, pch = 20, type = "b", col = 'red')
fit.best = regsubsets(lsurv ~ ., surgical, nvmax = 8)
coef(fit.best, which.min(mean.err))
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
for (j in 1:pred.count) {
if (j == 5) {
print(coef(fit.best, i))
}
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
for (j in 1:pred.count) {
if (j == 5) {
print(coef(fit.best, i))
}
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
for (j in 1:pred.count) {
if (j == 4) {
print(coef(fit.best, i))
}
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
for (j in 1:pred.count) {
if (j == 4) {
print(coef(fit.best, i))
}
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
rawdata = read.table('surgical.txt')
surgical = rawdata[, -9]
dimnames(surgical)[[2]] <- c('blood', 'prog', 'enz', 'liver',
'age', 'female', 'modAlc', 'heavyAlc', 'lsurv')
set.seed(0)
k = 5
pred.count = ncol(surgical) - 1
folds = sample(1:k, nrow(surgical), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(lsurv ~ ., surgical[folds != i, ], nvmax = 8)
for (j in 1:pred.count) {
if (j == 4) {
print(coef(fit.best, j))
}
pred = predict(fit.best, surgical[folds == i, ], id = j)
err.matrix[i, j] = mean((surgical$lsurv[folds == i] - pred) ^ 2)
}
}
library(MASS)
bos = Boston
attach(bos)
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars = names(coefi)
mat[, xvars] %*% coefi
}
set.seed(0)
k = 10
pred.count = ncol(bos) - 1
folds = sample(1:k, nrow(bos), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
if (j == 4) {
print(coef(fit.best, j))
}
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i] - pred) ^ 2)
}
}
library(MASS)
bos = Boston
attach(bos)
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars = names(coefi)
mat[, xvars] %*% coefi
}
set.seed(0)
k = 10
pred.count = ncol(bos) - 1
folds = sample(1:k, nrow(bos), replace = T)
err.matrix = matrix(NA, k, pred.count)
for (i in 1:k) {
fit.best = regsubsets(crim ~ ., bos[folds != i, ], nvmax = 13)
for (j in 1:pred.count) {
if (j == 9) {
print(coef(fit.best, j))
}
pred = predict(fit.best, bos[folds == i, ], id = j)
err.matrix[i, j] = mean((bos$crim[folds == i] - pred) ^ 2)
}
}
